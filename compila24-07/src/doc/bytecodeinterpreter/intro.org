#+LINK: srcbytecode ../../bytecode/%s
#+LINK: srcruntime ../../runtime/%s

* Introduction

This report presents the local variant of a library for /bytecode
construction and interpretation/ written for the compiler construction
course INF5110 at the University of Oslo.  The objective of this exercise
is to write a compiler for a simple example language. The bytecode library
and intepreter were developed to be used in the /code generation/ and
/runtime/ part of the obligatory exercises in the course.


Bytecode instructions are in general similar to instructions in machine
code, but instead of being run directly on a machine, they are usually
interpreted by a bytecode interpreter. Alternatively, they may also be
translated into machine code before being run. A bytpecode instruction
library is a library to simplify the task of generating bytecode for a
bytecode interpreter. The terminology "bytecode" comes from the fact that
the size of each instruction one single byte.

Our bytecode is quite similar to Java bytecode and our bytecode library is
based on the [[http://commons.apache.org/proper/commons-bcel/][Byte Code Engineering Library]].[fn:bcel] We choose to write a
simpler, stripped-down version that, for instance, does not support
classes, virtual procedures, and many other features supported by Java's
bytecode.  This way, it's simpler to work with and there would be less
code. For instance, one does not need to create classes like, since our
language does not have them, just for ``some reasons unexplained''. Still,
we encourage students to look at BCEL, it's a nice and well designed tool



The bytecode library and the interpreter are, not surprisingly, written in
Java. All the code is written in source form and consists of the following
packages.


|---------------------------+-------------------------------------------|
| package                   | purpose                                   |
|---------------------------+-------------------------------------------|
| ~bytecode.*~              | classes to create bytecode                |
| ~bytecode.instructions.*~ | instruction classes, supporting the above |
| ~bytecode.type.*~         | classes for types, supporting the above   |
| ~runtime.*~               | classes for the runtime system            |
|---------------------------+-------------------------------------------|

The code for the two packages ~bytecode~ and ~runtime~ is found in the
corresponding two directories under ~./src~

** The interpreter

The interpreter is /stack based/ and it interprets about 40 different
instructions of our bytecode.  The interpreter ``automatically'' handles
allocation of struct types, method calls and access of variables in a
struct when instructed to by the bytecode instructions. In the current
version, there is *no garbage collector* and it just allocates memory
sequentially as long as there is memory left.

#+index: instruction
#+index: operation

The operators or instructions are so called *stack operations*. It means
that whe the intpreter executes an instruction, it pops off a number of
operands from the stack (0 or more), performs the task specified by the
instruction, and leaves a number of result values on the stack, typically
just one such value.

The interpreter is not written for efficiency, by rather for readability
and ease of creating runnable bytecode. For instance, the types are kept on
the stack together with the calculated values and the interpreter decides
what kind of operation to perform based on the types as well as the current
instruction. For example, an ~ADD~ instruction, representing addition, will
be performed differently if there are two integers on the stack, two
floats, or one of each. That's different from Java bytecode, which has an
~ADDINT~ and an ~ADDFLOAT~ instruction and where type casting has to be
done explicitly in the bytecode (for example with the ~i2f~ instruction,
which does the corresponding conversion).

** Interpreting bytecode


As said, the interpreter is stack-based. We are not talking here about the
run-time stack of the run-time environment, but the P-code like treatment
of instruction. Of course, the interpreter must realize also some stack
organizing calls and returns, scoping, and parameter passing.


The parameters of an an operation (including user-defined functions) must
be placed on the stack with *the leftmost at the bottom and the rightmost
on the top* of the stack before the instruction itself is interpreted. The
top of the stack is the place where one pushes into and pops off. In the
lecture, in the part of the run-time environments, the run-time stack was
perhaps confusingly /depicted/ with the top the stack at the bottom.

For example, the ~SUB~ instruction (for subtraction) requires that the two
operands of the ~SUB~ instruction are on the stack in the correct order
beforehand. The number to subtract must be on the top of the stack and the
number to subtract from deeper in the stack. We may denote the elements on
the stack before an instruction is interpreted with $s_n$, where $n$ is the
index from the top, with the top as $n = 0$. Then, the result of the ~SUB~
instruction is that the two values on the top of the stack is removed and
replaced by $s_1 - s_0$. 

** The library

The library has a class  [[srcbytecode:CodeFile.java][~CodeFile~]] that is the base class for creating a
program with ``runnable'' sequences of instructions, i.e. a (binary or
~.bin~) file, executable by the virtual machine or more specifically by the
virtual machine interpreter.


To create such a bytecode file, one must instantiate that class ~CodeFile~
and *add* procedures, structs and global variables using the procedures of
the ~CodeFile~ object. Objects that represent local variables and
instructions are created using the library and added to the procedure
objects, which are of class ~CodeProcedure~. When the program is complete,
that is, when all the elements of the program has been added to the
~CodeFile~ object and its ~CodeProcedure~ objects, the actual bytecode can
be extracted by the procedure ~getBytecode()~ of a ~CodeFile~ object.  The
array of bytes that is then created, is usually written to a file, which
can then be read by the virtual machine and run by its interpreter.



A typical use of an instance of ~CodeFile~ will be something like this:


#+CAPTION: Typical use of the ~Codefile~ class
#+include: "codesnippets/useofcodefile.javaoid" src java

In that example, first an object of the class ~CodeFile~ is created. Then,
the procedure ~"main"~ is added. More procedures, structs, global
variables, and constants may be added to it. Then one can get the bytecode,
which is an array of bytes, and write it to a file, as shown in the code
snippet.

The generated bytecode file can then be inspected, for instance with an
editor for binary files like the Eclipse Hex Editor Plugin ([[http://ehep.sourceforge.net/][EHEP]]).[fn:ehep]

** Using the virtual machine

A bytecode file can be used in two ways, file, both offered by the class
[[srcruntime:VirtualMachine.java][~VirtualMachine~]] of the [[srcruntime:][~runtime~]] package. Either the execution is
triggered /externally/, from the *command line*. Or internally from within
a Java program. For the exernal use, the command line commands are


#+begin_example
  java runtime.VirtualMachine <FILENAME>
#+end_example

Using the interpreter from inside a program, one needs to instantiate the
class [[srcruntime:VirtualMachine.java][~VirtualMachine~]] and call its ~run~ method.

#+begin_src java
  VirtualMachine vm = new VirtualMachine("<FILENAME>");
  vm.run();
#+end_src

The class ~VirtualMachine~ can also list the content of the bytecode file
in textual form. Eexternally with the command line option ~-l~ or, from
inside a program, using the ~list~ method:

#+begin_example
  java runtime.VirtualMachine -l <FILENAME>
#+end_example

resp.

#+begin_src java
  VirtualMachine vm = new VirtualMachine("<FILENAME>");
  vm.list();
#+end_src

As an example, assume a program like this

#+include: "codesnippets/simple.cmp" src java

Listing the generated bytecode with the ~-l~ option would then look as
follows.

#+begin_example
Loading from file: ./Simple.bin
Variables:
0: var Complex dummy
Procedures:
0: Main()
   0: return
Structs:
0: Complex
     0: float
     1: float
Constants:
STARTWITH: Main
#+end_example



** Source code overview 

The [[srcbytecode:][bytecode library]] is a package contain a few classes and besides that
sub-packages with their own classes. The most important classes at the
top-level the library are the following

| class           |  purpose                       |
|-----------------+--------------------------------|
| [[srcbytecode:CodeFile.java][~CodeFile~]]      | main class to create byte code |
| [[srcbytecode:CodeProcedure.java][~CodeProcedure~]] | create code for procedures     |
| [[srcbytecode:CodeStruct.java][~CodeStruct~]]    | create code for structs        |

The first one is the the main class for creating byte code, mentioned
earlier, the other two for creating a procedure resp. a struct in the byte
code.


There are two sub-packages, contained in corresponding sub-directories


| sub-package    | purpose                               |
|----------------+---------------------------------------|
| [[srcbytecode:./instructions/][~instructions~]] | byte code instruction set             |
| [[srcbytecode:type/][~type~]]         | byte code representation of the types |
|----------------+---------------------------------------|


The packages are referred to accordingly ~bytecode.instructions.*~ and
~bytecode.type.*~.  The instructions in the first package are represented
as concrete subclasses of the abstract [[srcbytecode:./instructions/Instruction.java][~Instruction~]] class.  Similarly for
the types (as subclasses of the abstract [[srcbytecode:./type/CodeType.java][~CodeType~]] class. That package
contains all the types used in the byte code.

Although usually not directly used by a programmer, it might be instructive
to know the main classes of the virtual machine resp. the run-time system,
as well. See the package resp. directory [[srcruntime:][~runtime~]] The main classes are the
following:

| class (in ~runtime~) |
|----------------------|
| [[srcruntime:VirtualMachine.java][~VirtualMachine~]]     |
| [[srcruntime:Interpreter.java][~Interpreter~]]        |
| [[srcruntime:Stack.java][~Stack~]]              |
| [[srcruntime:Heap.java][~Heap~]]               |
| [[srcruntime:ActivationBlock.java][~ActivationBlock~]]    |
| [[srcruntime:Loader.java][~Loader~]]             |
|                      |

The virtual machine class is the starting point for running a program, as
mentioned earlier.  The loader class loads a a program from a file. The
actual interpretation of the byte code is provided by the interpreter
class. The classes ~Heap~ and ~Stack~ are responsible for management of the
corresponding memory. Note that there is a single stack for each program
(as the programs are single-threaded). The heap contains structs, and their
allocation and access is maintained by the mentioned class. The class for
activation blocks handles and stores the program counter, local variables
etc. and also handles the call and return of a procedure in conjuction with
the interpreter.


[Add some more from the original]





[fn:bcel] ~http://commons.apache.org/proper/commons-bcel/~, formerly as
part of the Jakarta project.

[fn:ehep]  For Ehep, see ~http://ehep.sourceforge.net/~ or
~https://marketplace.eclipse.org/content/ehep-eclipse-hex-editor-plugin~.


